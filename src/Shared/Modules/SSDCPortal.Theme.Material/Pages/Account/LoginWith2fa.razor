@page "/account/loginwith2fa"
@using InputType = MudBlazor.InputType

@layout LoginLayout
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IViewNotifier viewNotifier
@inject AppState appState
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject IStringLocalizer<Global> L

<AuthorizeView Context="AuthorizeContext">
    <Authorized>
        <LoadingBackground ShowLogoBox="true">
            <h3>Please stand by...</h3>
            <label>@L["Loading"]</label>
        </LoadingBackground>
    </Authorized>
    <NotAuthorized>
        @if (RedirectInProgress)
        {
            <LoadingBackground ShowLogoBox="true">
                <label>@L["Loading"]</label>
            </LoadingBackground>
        }
        else
        {
            <MudCard>
                @*<div class="hidden-mdc-down" style="visibility: hidden; display: none;">
                    <MudIconButton Icon="home" Class="float-left" Link="/" />
                </div>*@
                <div class="logo" style="margin: auto; text-align: center;">
                    <a href="/" title="@appState.AppName Home">
                        <img src="_content/SSDCPortal.Theme.Material/images/logo.svg" style="width: 100px;" title="@appState.AppName Home" alt="@appState.AppName" /><br />@appState.AppName
                    </a>
                    <br />
                    <h4>@L["Log in"]</h4>
                </div>
                <EditForm Model="@loginViewModel" OnValidSubmit="@SubmitLogin">
                    <FluentValidationValidator />
                    <ValidationSummary />
                    <fieldset>
                        <div class="form-group">
                            <MudTextField @ref="CodeInput"
                                          @bind-Value="@loginViewModel.TwoFactorCode"
                                          Text=@L["Code"]
                                          AdornmentIcon="@PasswordInputIcon"
                                          OnAdornmentClick="TogglePasswordVisibility"
                                          FullWidth="true"
                                          Required="true"
                                          InputType="@PasswordInput"
                                          tabindex="1"></MudTextField>
                            @*<AutoFocus Control=@(() => CodeInput.InputRef) />*@
                        </div>
                        <div class="form-group">
                            @*<MudButton class="float-right" ButtonType="submit" Raised="true" tabindex="2">@L["Login"]</MudButton>*@
                            <MudButton class="float-right" >@L["Login"]</MudButton>
                            <MudSwitch @bind-Checked="@loginViewModel.RememberMachine" class="filled-in chk-col-blue">@L["RememberBrowser"]</MudSwitch>
                        </div>
                    </fieldset>
                </EditForm>
            </MudCard>

            <MudExpansionPanels>
                <MudExpansionPanel IsExpanded="@forgotAuthenticatorToggle">
                    <MudCard>
                        <MudCardHeader>@L["ForgotAuthenticator"]</MudCardHeader>
                        <MudCardContent>
                            <EditForm Model="@forgotAuthenticatorInputModel" OnValidSubmit="@ForgotAuthenticator">
                                <FluentValidationValidator />
                                <ValidationSummary />
                                <div class="form-group">
                                    <MudTextField @bind-Value="@forgotAuthenticatorInputModel.RecoveryCode" Label=@L["RecoveryCode"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MudTextField>
                                </div>
                                <div class="form-group">
                                    <MudButton class="float-right" ButtonType="ButtonType.Submit">@L["Login"]</MudButton>
                                </div>
                            </EditForm>
                        </MudCardContent>
                    </MudCard>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    </NotAuthorized>
</AuthorizeView>
@code {

    private MudTextField<string> CodeInput;
    private bool PasswordVisibility { get; set; } = false;
    private string PasswordInputIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
    private InputType PasswordInput { get; set; }

    string navigateTo = null;
    IdentityAuthenticationStateProvider identityAuthenticationStateProvider;
    bool forgotAuthenticatorToggle = false;
    bool RedirectInProgress = false;
    static bool LoginSuccess = false;
    LoginWith2faInputModel loginViewModel { get; set; } = new LoginWith2faInputModel();
    LoginWithRecoveryCodeInputModel forgotAuthenticatorInputModel { get; set; } = new LoginWithRecoveryCodeInputModel();

    string ReturnUrl;

    protected override async Task OnInitializedAsync()
    {
        if (navigationManager.TryGetQueryString<string>("ReturnUrl", out string url))
            ReturnUrl = url;

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated || LoginSuccess)
            RedirectInProgress = true;
        else
            identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;

        LoginSuccess = false;
    }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    void TogglePasswordVisibility()
    {

        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }


    protected override async Task OnParametersSetAsync()
    {
        if (navigationManager.IsWebAssembly())
        {
            var user = (await authenticationStateTask).User;

            if (user.Identity.IsAuthenticated && navigateTo != null)
                navigationManager.NavigateTo(navigateTo);
        }
    }

    async Task SubmitLogin()
    {
        try
        {
            loginViewModel.ReturnUrl = ReturnUrl;
            var response = await identityAuthenticationStateProvider.LoginWith2fa(loginViewModel);

            await PostLoginProcess(response);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.Message, ViewNotifierType.Error, L["LoginFailed"]);
        }
    }

    async Task ForgotAuthenticator()
    {
        try
        {
            forgotAuthenticatorInputModel.ReturnUrl = ReturnUrl;
            var response = await identityAuthenticationStateProvider.LoginWithRecoveryCode(forgotAuthenticatorInputModel);

            await PostLoginProcess(response);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.Message, ViewNotifierType.Error, L["LoginFailed"]);
        }
    }

    async Task PostLoginProcess(ApiResponseDto response)
    {
        if (response.IsSuccessStatusCode)
        {
            if (navigationManager.IsWebAssembly())
            {
                if (string.IsNullOrEmpty(ReturnUrl))
                {
                    var userProfile = await appState.GetUserProfile();

                    navigateTo = navigationManager.BaseUri + (!string.IsNullOrEmpty(userProfile?.LastPageVisited) ? userProfile?.LastPageVisited : "/dashboard");
                }
                else
                    navigateTo = ReturnUrl;

                navigationManager.NavigateTo(navigateTo);
            }
            else
                RedirectInProgress = true;

            LoginSuccess = true;
        }
        else
            viewNotifier.Show(response.Message, ViewNotifierType.Error, L["LoginFailed"]);
    }
}
