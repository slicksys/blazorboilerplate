@page "/account/register"

@layout LoginLayout
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Global> L
@inject IViewNotifier viewNotifier

<MudCard>
    <div class="hidden-mdc-down">
        <MudIconButton Icon="home" Class="float-left" Link="/" />
    </div>
    <div class="logo">
        <img src="_content/SSDCPortal.Theme.Material/images/logo.svg" style="width:100px;" /><br />SSDCPortal
        <br />
        <h4>@L["Registration"]</h4>
    </div>
    <EditForm Model="@registerViewModel" OnValidSubmit="@RegisterUser">
        <FluentValidationValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MudTextField @bind-Value="@registerViewModel.UserName" Text=@L["UserName"] Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@registerViewModel.Email" Text=@L["Email"] Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@registerViewModel.Password" Text=@L["Password"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@registerViewModel.PasswordConfirm" Text=@L["Password Confirmation"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MudTextField>
            </div>
            <div class="form-group d-flex justify-content-end">
                <MudButton ButtonType="ButtonType.Submit">@L["Register"]</MudButton>
            </div>
            <hr />
            <NavLink href="account/login">
                <h6 class="font-weight-normal text-center">@L["AlreadyRegistered"]</h6>
            </NavLink>
        </fieldset>
    </EditForm>
</MudCard>

@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    RegisterViewModel registerViewModel { get; set; } = new RegisterViewModel();

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
            navigationManager.NavigateTo("/");
    }

    async Task RegisterUser()
    {
        try
        {
            var response = await ((IdentityAuthenticationStateProvider)authStateProvider).Register(registerViewModel);

            if (response.IsSuccessStatusCode)
            {
                viewNotifier.Show("New User Email Verification was sent to: " + registerViewModel.Email, ViewNotifierType.Success, L["UserCreationSuccessful"]);
                navigationManager.NavigateTo("/");
            }
            else
            {
                viewNotifier.Show(response.Message, ViewNotifierType.Error, L["UserCreationFailed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.Message, ViewNotifierType.Error, L["UserCreationFailed"]);
        }
    }
}
