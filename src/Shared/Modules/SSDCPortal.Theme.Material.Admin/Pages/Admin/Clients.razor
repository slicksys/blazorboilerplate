@page "/admin/clients"
@attribute [Authorize(Policies.IsAdmin)]
@layout AdminLayout
@inject HttpClient Http
@inject IViewNotifier viewNotifier
@inject IStringLocalizer<Global> L

@using IdentityServer4.Models
@using IdentityModel
@using System.Net

<h1>@L["OpenIdClients"]</h1>
<p>Clients Management.</p>

@if (clients == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>@L["Loading"]</label>
    </LoadingBackground>
}
else
{
    <MudTable Class="mat-elevation-z5" Items="@clients" Striped="true">
        <HeaderContent>
            <MudTh><MudButton Icon="add" Label=@L["New Client"] OnClick="@(() => OpenUpsertClientDialog())"></MudButton></MudTh>
            <MudTh>Id</MudTh>
            <MudTh>Enabled</MudTh>
            <MudTh>Access Token Lifetime</MudTh>
            <MudTh>Require Client Secret</MudTh>
            <MudTh>Require Consent</MudTh>
            <MudTh>Local Login</MudTh>
            <MudTh>Grant Types</MudTh>
            <MudTh>PKCE</MudTh>
            <MudTh>Scopes</MudTh>
        </HeaderContent>
        <RowTemplate Context="ClientRow">
            <MudTd>
                <div style="width:155px;">
                    <MudIconButton Icon="edit" OnClick="@(() => OpenUpsertClientDialog(ClientRow))"></MudIconButton>
                    <MudIconButton Icon="delete" OnClick="@(() => OpenDeleteClientDialog(ClientRow))"></MudIconButton>
                </div>
            </MudTd>
            <MudTd><div style="min-width:130px;">@ClientRow.ClientId</div></MudTd>
            <MudTd>MudSwitch Checked="  ClientRow.Enabled" ValueChanged= ((item) => UpdateEnabled(ClientRow))</MudTd>
            <MudTd><div style="min-width:130px;">@ClientRow.AccessTokenLifetime</div></MudTd>
            <MudTd><MudSwitch Checked="@ClientRow.RequireClientSecret" Disabled="true"></MudSwitch></MudTd>
            <MudTd><MudSwitch Checked="@ClientRow.RequireConsent" Disabled="true"></MudSwitch></MudTd>
            <MudTd><MudSwitch Checked="@ClientRow.EnableLocalLogin" Disabled="true"></MudSwitch></MudTd>
            <MudTd>
                <MudChipSet>
                    @foreach (var grantType in ClientRow.AllowedGrantTypes)
                        {
                        <MudChip Text="@grantType"></MudChip>
                        }
                </MudChipSet>
            </MudTd>
            <MudTd><MudSwitch Checked="@ClientRow.RequirePkce" Disabled="true"></MudSwitch></MudTd>
            <MudTd>
                <MudChipSet>
                    @foreach (var scope in ClientRow.AllowedScopes)
                        {
                        <MudChip Text="@scope"></MudChip>
                        }
                </MudChipSet>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

<MudDialog @bind-IsOpen="@isUpsertClientDialogOpen">
    <TitleContent>@labelUpsertDialogTitle</TitleContent>
    <DialogContent>
        <EditForm Model="@currentClient">
            <FluentValidationValidator />
            <ValidationSummary />
            <MudTabs>
                <MudTabPanel Text="Main">
                    <fieldset>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.ClientId" Disabled="@isCurrentClientKeyReadOnly" Label="Id" Icon="description" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudSwitch @bind-Checked="@currentClient.Enabled" Label="Enabled"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.Description" Label="Description" Icon="description" IconTrailing="true" FullWidth="true"></MudTextField>
                        </div>
                        <MudDivider></MudDivider>
                        <h3 class="mat-subtitle1">Device Flow</h3>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.DeviceCodeLifetime" Label="Device Code Lifetime in seconds" Icon="timer" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.UserCodeType" Label="User Code Type" Icon="description" IconTrailing="true" FullWidth="true" Required="false"></MudTextField>
                        </div>
                    </fieldset>
                </MudTabPanel>
                <MudTabPanel Text="Secrets">
                    <fieldset>
                        <div class="form-group" style="margin-top:16px;">
                            <MudSwitch @bind-Checked="@currentClient.RequireClientSecret" Label="Require Client Secret"></MudSwitch>
                        </div>
                    </fieldset>
                    <MudTable Items="@currentClient.ClientSecrets" Class="mat-elevation-z5" ShowPaging="false" PageSize="@int.MaxValue" style="@(currentClient.RequireClientSecret ? "" : "display:none;")">
                        <HeaderContent>
                            <MudTh style="min-width:190px;"><MudButton Icon="add" Label="New Secret" OnClick="@(() => OpenCreateClientSecretDialogOpen())"></MudButton></MudTh>
                            <MudTh>Expiration</MudTh>
                            <MudTh>Description</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="ClientSecretRow">
                            <MudTd style="text-align:center;">
                                <MudIconButton Icon="delete" OnClick="@(() => OpenDeleteClientSecretDialog(ClientSecretRow))"></MudIconButton>
                            </MudTd>
                            <MudTd>@ClientSecretRow.Expiration</MudTd>
                            <MudTd>@ClientSecretRow.GetDisplayValue()</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Text="Grant Types">
                    <MudTable Items="@grantTypeSelections" Class="mat-elevation-z5, mdc-table-allow" ShowPaging="false" PageSize="@int.MaxValue">
                        <HeaderContent>
                            <MudTh>@L["Name"]</MudTh>
                            <MudTh>Allow</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="GrantTypeRow">
                            <MudTd>@GrantTypeRow.Name</MudTd>
                            <MudTd>There was a CheckBox</MudTd>
                        </RowTemplate>
                    </MudTable>
                    <MudSwitch @bind-Checked="@currentClient.RequirePkce" Label="Proof Key for Code Exchange (PKCE)"></MudSwitch>
                </MudTabPanel>
                <MudTabPanel Text="Standard Scopes">
                    <MudTable Items="@standardScopeSelections" Class="mat-elevation-z5, mdc-table-allow" ShowPaging="false" PageSize="@int.MaxValue">
                        <HeaderContent>
                            <MudTh>@L["Name"]</MudTh>
                            <MudTh>Allow</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="StandardScopeRow">
                            <MudTd>@StandardScopeRow.Name</MudTd>
                            <MudTd><MudSwitch @bind-Checked="@StandardScopeRow.IsSelected"></MudSwitch></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Text="API Scopes">
                    <MudTable Items="@apiScopeSelections" Class="mat-elevation-z5, mdc-table-allow" ShowPaging="false" PageSize="@int.MaxValue">
                        <HeaderContent>
                            <MudTh>@L["Name"]</MudTh>
                            <MudTh>Allow</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="ApiScopeRow">
                            <MudTd>@ApiScopeRow.Name</MudTd>
                            <MudTd><MudSwitch @bind-Checked="@ApiScopeRow.IsSelected"></MudSwitch></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Label="Authentication / Logout">
                    <fieldset>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.PostLogoutRedirectUrisText" Label="Post Logout Redirect Uris" Icon="link" IconTrailing="true" TextArea="true" FullWidth="true" Required="false"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.FrontChannelLogoutUri" Label="Front Channel Logout Uri" Icon="link" IconTrailing="true" FullWidth="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudSwitch @bind-Checked="@currentClient.FrontChannelLogoutSessionRequired" Label="Front Channel Logout Session Required"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.BackChannelLogoutUri" Label="Back Channel Logout Uri" Icon="link" IconTrailing="true" FullWidth="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudSwitch @bind-Checked="@currentClient.BackChannelLogoutSessionRequired" Label="Back Channel Logout Session Required"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudSwitch @bind-Checked="@currentClient.EnableLocalLogin" Label="Enable Local Login"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.IdentityProviderRestrictionsText" Label="Identity Provider Restrictions" Icon="link" IconTrailing="true" TextArea="true" FullWidth="true" Required="false"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.UserSsoLifetime" Label="User Sso Lifetime  in seconds" Icon="timer" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                        </div>
                    </fieldset>
                </MudTabPanel>
                <MudTabPanel Text="Token">
                    <fieldset>
                        <div class="form-group" style="margin-top:16px;">
                            <MudSwitch @bind-Checked="@currentClient.AllowOfflineAccess" Label="Allow Offline Access (client can request refresh tokens)"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.IdentityTokenLifetime" Label="Identity Token Lifetime in seconds" Icon="timer" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.AccessTokenLifetime" Label="Access Token Lifetime in seconds" Icon="timer" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudSwitch @bind-Checked="@currentClient.AllowAccessTokensViaBrowser" Label="Allow Access Tokens Via Browser"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.AuthorizationCodeLifetime" Label="Authorization Code Lifetime in seconds" Icon="timer" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.AbsoluteRefreshTokenLifetime" Label="Maximum lifetime of a refresh token in seconds" Icon="timer" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.SlidingRefreshTokenLifetime" Label="Sliding lifetime of a refresh token in seconds" Icon="timer" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudSelectItem @bind-Value="@currentClient.RefreshTokenUsage" Items="@TokenUsages" Label="Refresh Token Usage"></MudSelectItem>
                        </div>
                        <div class="form-group">
                            <MudSelectItem @bind-Value="@currentClient.RefreshTokenExpiration" Items="@RefreshTokenExpirations" Label="Refresh Token Expiration"></MudSelectItem>
                        </div>
                        <div class="form-group">
                            <MudSwitch @bind-Checked="@currentClient.UpdateAccessTokenClaimsOnRefresh" Label="Update Access Token Claims on refresh"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudSelectItem @bind-Value="@currentClient.AccessTokenType" Items="@AccessTokenTypes" Label="Access Token Type"></MudSelectItem>
                        </div>
                        <div class="form-group">
                            <MudSwitch @bind-Checked="@currentClient.IncludeJwtId" Label="Include Jwt Id"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.AllowedCorsOriginsText" Label="Allowed Cors Origins" Icon="link" IconTrailing="true" TextArea="true" FullWidth="true" Required="false"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.RedirectUrisText" Label="Redirect Uris" Icon="link" IconTrailing="true" TextArea="true" FullWidth="true" Required="false"></MudTextField>
                        </div>
                    </fieldset>
                    <h3 class="mat-subtitle1">Allowed Identity Token Signing Algorithms</h3>
                    <MudTable Items="@tokenSigningAlgorithmsSelections" Class="mat-elevation-z5, mdc-table-allow" ShowPaging="false" PageSize="@int.MaxValue">
                        <HeaderContent>
                            <MudTh>@L["Name"]</MudTh>
                            <MudTh>Allow</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="TokenSigningAlgorithmsRow">
                            <MudTd>@TokenSigningAlgorithmsRow.Name</MudTd>
                            <MudTd>There was a CheckBox</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Text="Consent Screen">
                    <fieldset>
                        <div class="form-group" style="margin-top:16px;">
                            <MudSwitch @bind-Checked="@currentClient.RequireConsent" Label="Require Consent"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudSwitch @bind-Checked="@currentClient.AllowRememberConsent" Label="Allow Remember Consent"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.ConsentLifetime" Label="Consent Lifetime in seconds" Icon="timer" IconTrailing="true" FullWidth="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.ClientName" Label="Client display name" Icon="description" IconTrailing="true" FullWidth="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.ClientUri" Label="Client Uri" Icon="link" IconTrailing="true" FullWidth="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentClient.LogoUri" Label="Logo Uri" Icon="link" IconTrailing="true" FullWidth="true"></MudTextField>
                        </div>
                    </fieldset>
                </MudTabPanel>
            </MudTabs>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@CancelChanges">@L["Cancel"]</MudButton>
        <MudButton OnClick="@UpsertClient">@labelUpsertDialogOkButton</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsOpen="@isDeleteClientDialogOpen" Style="z-index:100">
    <TitleContent><MudIcon Icon="warning"></MudIcon> @L["Confirm Delete"]</TitleContent>
    <DialogContent>
        @L["Are you sure you want to delete {0}?", currentClient.ClientId]
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isDeleteClientDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@DeleteClientAsync">@L["Delete"]</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsOpen="@isDeleteClientSecretDialogOpen" Style="z-index:100">
    <TitleContent><MudIcon Icon="warning"/>@L["Confirm Delete"]</TitleContent>
    <DialogContent>
        @L["Are you sure you want to delete {0}?", currentSecret.GetDisplayValue()]
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isDeleteClientSecretDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@DeleteClientSecret">@L["Delete"]</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsOpen="@isCreateClientSecretDialogOpen">
    <TitleContent>New Secret for Client @currentClient.ClientId</TitleContent>
    <DialogContent>
        <EditForm Model="@currentSecret">
            <FluentValidationValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    <MudTextField @bind-Value="@currentSecret.Description" Label="Description" Icon="description" IconTrailing="true" FullWidth="true"></MudTextField>
                </div>
                <div class="form-group">
                    <MudTextField @bind-Value="@currentSecret.Value" Label="Secret" Icon="lock_outline" IconTrailing="true" Required="true"></MudTextField>
                    <MudIconButton OnClick="@GenerateSecret" Icon="refresh"></MudIconButton>
                    @*https://github.com/SamProf/MatBlazor/issues/303
                        <MudTooltip Tooltip="You have to copy the secret now, because it cannot be retrieved anymore."></MudTooltip>*@
                    <MudIconButton Icon="info"></MudIconButton>
                </div>
                <div class="form-group">
                    <MudDatePicker @bind-Value="@currentSecret.Expiration" Label="Expiration" FullWidth="true" Minimum="@DateTime.Now"></MudDatePicker>
                </div>
            </fieldset>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isCreateClientSecretDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@CreateSecret">Create Client Secret</MudButton>
    </DialogActions>
</MudDialog>

@code {
    int pageSize { get; set; } = 15;
    int currentPage { get; set; } = 0;

    bool isCurrentClientKeyReadOnly = false;

    List<ClientDto> clients;
    ClientDto currentClient { get; set; } = new ClientDto();
    Secret currentSecret { get; set; } = new Secret();
    TokenUsage[] TokenUsages { get; set; } = (TokenUsage[])Enum.GetValues(typeof(TokenUsage));
    AccessTokenType[] AccessTokenTypes { get; set; } = (AccessTokenType[])Enum.GetValues(typeof(AccessTokenType));
    TokenExpiration[] RefreshTokenExpirations { get; set; } = (TokenExpiration[])Enum.GetValues(typeof(TokenExpiration));

    #region OnInitializedAsync

    protected override async Task OnInitializedAsync()
    {
        await InitializeClientsListAsync();
    }

    public async Task InitializeClientsListAsync()
    {
        try
        {
            var apiResponse = await Http.GetNewtonsoftJsonAsync<ApiResponseDto<List<ClientDto>>>($"api/Admin/Clients?pageSize={pageSize}&pageNumber={currentPage}");

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                clients = apiResponse.Result;
            }
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    #endregion

    #region OpenUpsertClientDialog

    class Selection
    {
        public bool IsSelected { get; set; }
        public string Name { get; set; }
        public string Value { get; set; }
    };

    bool isUpsertClientDialogOpen = false;
    bool isInsertOperation;

    string labelUpsertDialogTitle;
    string labelUpsertDialogOkButton;

    List<Selection> grantTypeSelections = new List<Selection>();
    List<Selection> standardScopeSelections = new List<Selection>();
    List<Selection> apiScopeSelections = new List<Selection>();
    List<Selection> tokenSigningAlgorithmsSelections = new List<Selection>();

    //See https://identityserver4.readthedocs.io/en/latest/topics/crypto.html
    string[] signingAlgorithms = new string[] { "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" };


    async Task OpenUpsertClientDialog(ClientDto client = null)
    {
        try
        {
            var getIdentityResourcesTask = Http.GetNewtonsoftJsonAsync<ApiResponseDto<List<IdentityResource>>>("api/Admin/IdentityResources").ContinueWith((t) =>
            {
                standardScopeSelections.Clear();

                foreach (var item in t.Result.Result)
                {
                    standardScopeSelections.Add(new Selection
                    {
                        Name = $"{item.DisplayName} ({item.Name})",
                        Value = item.Name,
                        IsSelected = currentClient.AllowedScopes.Contains(item.Name)
                    });
                }
            });
            var getApiResourcesTask = Http.GetNewtonsoftJsonAsync<ApiResponseDto<List<ApiResource>>>("api/Admin/ApiResources").ContinueWith((t) =>
            {
                apiScopeSelections.Clear();

                foreach (var item in t.Result.Result)
                {
                    apiScopeSelections.Add(new Selection
                    {
                        Name = $"{item.DisplayName} ({item.Name})",
                        Value = item.Name,
                        IsSelected = currentClient.AllowedScopes.Contains(item.Name)
                    });
                }
            });

            isInsertOperation = client == null;

            currentClient = client ?? new ClientDto();

            // Update the UI
            if (isInsertOperation)
            {
                labelUpsertDialogTitle = L["New Client"];
                labelUpsertDialogOkButton = L["Create"];
            }
            else
            {
                labelUpsertDialogTitle = L["Edit {0}", currentClient.ClientId];
                labelUpsertDialogOkButton = L["Update"];
            }

            isCurrentClientKeyReadOnly = !isInsertOperation;

            grantTypeSelections.Clear();

            foreach (var info in typeof(GrantType).GetFields().Where(x => x.IsStatic && x.IsLiteral))
            {
                grantTypeSelections.Add(new Selection
                {
                    Name = $"{info.Name.Humanize(LetterCasing.Title)} ({info.GetValue(info)})",
                    Value = info.GetValue(info).ToString(),
                    IsSelected = currentClient.AllowedGrantTypes.Contains(info.GetValue(info))
                });
            }

            tokenSigningAlgorithmsSelections.Clear();

            foreach (var sa in signingAlgorithms)
            {
                tokenSigningAlgorithmsSelections.Add(new Selection
                {
                    Name = sa,
                    Value = sa,
                    IsSelected = currentClient.AllowedIdentityTokenSigningAlgorithms.Contains(sa)
                });
            }

            await Task.WhenAll(getIdentityResourcesTask, getApiResourcesTask);

            if (!isInsertOperation)
                currentClient.SaveState();

            isUpsertClientDialogOpen = true;
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    async Task UpdateEnabled(ClientDto client)
    {
        currentClient = client;
        currentClient.Enabled = !currentClient.Enabled;
        isInsertOperation = false;
        await UpsertClient();
    }

    void CancelChanges()
    {
        currentClient.RestoreState();
        isUpsertClientDialogOpen = false;
    }

    async Task UpsertClient()
    {
        try
        {
            if (currentClient == null)
            {
                viewNotifier.Show("Client Creation Error", ViewNotifierType.Error, "New Client not found");
                return;
            }

            if (isUpsertClientDialogOpen)
            {
                currentClient.AllowedGrantTypes = grantTypeSelections.Where(i => i.IsSelected).Select(i => i.Value).ToList();
                currentClient.AllowedIdentityTokenSigningAlgorithms = tokenSigningAlgorithmsSelections.Where(i => i.IsSelected).Select(i => i.Value).ToList();
                currentClient.AllowedScopes = standardScopeSelections.Where(i => i.IsSelected).Select(i => i.Value).ToList();
                ((List<string>)currentClient.AllowedScopes).AddRange(apiScopeSelections.Where(i => i.IsSelected).Select(i => i.Value).ToList());
            }

            ApiResponseDto apiResponse;

            if (isInsertOperation)
                apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/Admin/Client", currentClient);
            else
                apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/Admin/Client", currentClient);

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success);

                StateHasChanged();
            }
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error);


            await OnInitializedAsync();

            isUpsertClientDialogOpen = false;
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        finally
        {
            currentClient.ClearState();
        }
    }

    #endregion

    #region OpenDeleteClientDialog

    bool isDeleteClientDialogOpen = false;

    void OpenDeleteClientDialog(ClientDto client)
    {
        currentClient = client;
        isDeleteClientDialogOpen = true;
    }

    async Task DeleteClientAsync()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Admin/Client/{currentClient.ClientId}");
            if (response.StatusCode != (HttpStatusCode)Status200OK)
            {
                viewNotifier.Show("Client Delete Failed", ViewNotifierType.Error);
                return;
            }

            viewNotifier.Show("Client Deleted", ViewNotifierType.Success);
            await OnInitializedAsync();
            isDeleteClientDialogOpen = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    #endregion

    #region OpenDeleteClientSecretDialog

    bool isDeleteClientSecretDialogOpen = false;

    void OpenDeleteClientSecretDialog(Secret secret)
    {
        currentSecret = secret;
        isDeleteClientSecretDialogOpen = true;
    }

    void DeleteClientSecret()
    {
        currentClient?.ClientSecrets.Remove(currentSecret);
        isDeleteClientSecretDialogOpen = false;
    }

    #endregion

    #region OpenCreateClientSecretDialogOpen

    bool isCreateClientSecretDialogOpen = false;

    void OpenCreateClientSecretDialogOpen()
    {
        currentSecret = new Secret();
        GenerateSecret();
        isCreateClientSecretDialogOpen = true;
    }

    public void CreateSecret()
    {
        if (!string.IsNullOrWhiteSpace(currentSecret.Value))
        {
            currentSecret.Value = currentSecret.Value.ToSha512();

            if (string.IsNullOrWhiteSpace(currentSecret.Description))
                currentSecret.Description = $"Created on {DateTime.Now}";

            currentClient?.ClientSecrets.Add(currentSecret);
            isCreateClientSecretDialogOpen = false;
        }
    }

    void GenerateSecret()
    {
        currentSecret.Value = IdentityModel.CryptoRandom.CreateUniqueId(32);
    }

    #endregion

}
