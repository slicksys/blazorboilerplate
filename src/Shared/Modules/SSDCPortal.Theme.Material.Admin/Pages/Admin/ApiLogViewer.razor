@page "/admin/apilog"

@attribute [Authorize(Policies.IsAdmin)]
@layout AdminLayout
@inject IApiClient apiClient
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar 


<h1>Blazor / .NET Core Middleware Audit Log</h1>

@if (apiLogItems == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>@L["Loading"]</label>
    </LoadingBackground>
}
else
{
    <MudTable ServerData="@(new Func<TableState, Task<TableData<ApiLogItem>>>(ServerReload))"
              Dense="true"
              Hover="true"
              @ref="table">

        <HeaderContent>
            <MudTh>
                <div style="width: 175px;"><MudButton Icon="refresh" OnClick="@(() => LoadData())" Raised="true" Mini="true" Style="margin-right: 16px;"></MudButton> Date / Time</div>
            </MudTh>
            <MudTh>Http Code</MudTh>
            <MudTh>IP Address</MudTh>
            <MudTh>Method</MudTh>
            <MudTh>Response Time</MudTh>
            <MudTh>
                <div style="width: 175px;">UserId</div>
            </MudTh>
            <MudTh>Path</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.RequestTime</MudTd>
            <MudTd>@context.StatusCode</MudTd>
            <MudTd><span style="font-size: small">@context.IPAddress</span></MudTd>
            <MudTd>@context.Method</MudTd>
            <MudTd>@context.ResponseMillis</MudTd>
            <MudTd>@context.ApplicationUserId</MudTd>
            <MudTd>@context.Path</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] {50, 100}" />
        </PagerContent>
    </MudTable>
    @*<MudPaginator PageSize="@pageSize" Page="@(async a=> await OnPage(a))" Length="@totalItemsCount" Style="background: transparent"></MudPaginator>*@
}


@code {

    List<ApiLogItem> apiLogItems;
    private int totalItemsCount { get; set; } = 0;
    private int pageSize { get; set; } = 10;
    private int pageIndex { get; set; } = 0;
    private int totalItems { get; set; } = 0;
    private IEnumerable<ApiLogItem> pagedData;
    private MudTable<ApiLogItem> table;
    private string searchString = null;


    private async Task<TableData<ApiLogItem>> ServerReload(TableState state)
    {
        var data = await apiClient.GetApiLogs(null, pageSize, pageIndex * pageSize);
        totalItems = data.Count();
        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<ApiLogItem>() { TotalItems = totalItems, Items = pagedData };
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    //async Task OnPage(MatPaginatorPageEvent e)
    //{
    //    pageSize = e.PageSize;
    //    pageIndex = e.PageIndex;

    //    await LoadData();
    //}

    protected async Task LoadData()
    {
        try
        {
            var result = await apiClient.GetApiLogs(null, pageSize, pageIndex * pageSize);
            apiLogItems = new List<ApiLogItem>(result);
            totalItemsCount = (int)result.InlineCount.Value;
            //viewNotifier.Show(L["One item found", Plural.From("{0} items found", totalItemsCount)], ViewNotifierType.Success, L["Operation Successful"]);
            Snackbar.Add(L["One item found"], Severity.Success, config =>
            {
                config.ShowCloseIcon = true;
                config.SnackbarVariant = Variant.Filled;
                config.ActionColor = Color.Success;
            });

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.GetBaseException().Message, Severity.Error, config =>
            {
                config.ShowCloseIcon = true;
                config.SnackbarVariant = Variant.Filled;
                config.ActionColor = Color.Success;
            });
        }

        await InvokeAsync(StateHasChanged);
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
