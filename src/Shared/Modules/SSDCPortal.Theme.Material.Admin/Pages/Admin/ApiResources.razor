@page "/admin/apiResources"
@attribute [Authorize(Policies.IsAdmin)]
@layout AdminLayout
@inject HttpClient Http
@inject IStringLocalizer<Global> L
@inject IViewNotifier viewNotifier

@using IdentityServer4.Models
@using IdentityModel
@using System.Net

<h1>@L["ApiResources"]</h1>
<p>API Resources Management.</p>

@if (apiResources == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>@L["Loading"]</label>
    </LoadingBackground>
}
else
{
    <MudTable Class="mat-elevation-z5" Items="@apiResources" Striped="true">
        <HeaderContent>
            <MudTh><MudButton Icon="add" Label=@L["New API Resource"] OnClick="@(() => OpenUpsertApiResourceDialog())"></MudButton></MudTh>
            <MudTh>@L["Name"]</MudTh>
            <MudTh>Enabled</MudTh>
            <MudTh>Display Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Scopes</MudTh>
            <MudTh>User Claims</MudTh>
        </HeaderContent>
        <RowTemplate Context="ApiResourceRow">
            <MudTd>
                <div style="width:155px;">
                    <MudIconButton Icon="edit" OnClick="@(() => OpenUpsertApiResourceDialog(ApiResourceRow))"></MudIconButton>
                    <MudIconButton Icon="delete" OnClick="@(() => OpenDeleteApiResourceDialog(ApiResourceRow))"></MudIconButton>
                </div>
            </MudTd>
            <MudTd><div style="min-width:130px;">@ApiResourceRow.Name</div></MudTd>
            <MudTd>@*<MudSwitch Checked="@ApiResourceRow.Enabled" ValueChanged="@((item) => UpdateEnabled(ApiResourceRow))"></MudSwitch>*@</MudTd>
            <MudTd><div style="min-width:130px;">@ApiResourceRow.DisplayName</div></MudTd>
            <MudTd><div style="min-width:130px;">@ApiResourceRow.Description</div></MudTd>
            <MudTd>
                <MudChipSet>
                    @foreach (var scope in ApiResourceRow.Scopes)
                        {
                        <MudChip Text="@scope"></MudChip>
                        }
                </MudChipSet>
            </MudTd>
            <MudTd>
                <MudChipSet>
                    @foreach (var userClaim in ApiResourceRow.UserClaims)
                        {
                        <MudChip Text="@userClaim"></MudChip>
                        }
                </MudChipSet>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

<MudDialog>
    <TitleContent>
        <div class="d-flex">
            <MudText Class="mt-1"><strong>@labelUpsertDialogTitle.</strong></MudText>
            <MudBadge Content="8" Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                <MudIcon Icon="@Icons.Material.Filled.RateReview" Color="Color.Default" />
            </MudBadge>
        </div>
    </TitleContent>
      
    @*@bind-IsOpen="@isUpsertApiResourceDialogOpen"*@
    <DialogContent>
        <EditForm Model="@currentApiResource">
            <ValidationSummary />
            <FluentValidationValidator />
            <MudTabs>
                <MudTabPanel Text="Main">
                    <fieldset>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentApiResource.Name" Disabled="@isCurrentApiContextIdReadOnly" Label="Id" Icon="description" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudSwitch @bind-Checked="@currentApiResource.Enabled" Label="Enabled"></MudSwitch>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentApiResource.DisplayName" Label="Display Name" Icon="description" IconTrailing="true" FullWidth="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <MudTextField @bind-Value="@currentApiResource.Description" Label="Description" Icon="description" IconTrailing="true" FullWidth="true"></MudTextField>
                        </div>
                        <div class="form-group">
                            <div class="form-group">
                                <MudTextField @bind-Value="@currentApiResource.ScopesText" Label="API Scopes" TextArea="true" FullWidth="true" Required="false"></MudTextField>
                            </div>
                        </div>
                    </fieldset>
                    <h3 class="mat-subtitle1">Allowed Access Token Signing Algorithms</h3>
                    <MudTable Items="@tokenSigningAlgorithmsSelections" Class="mat-elevation-z5, mdc-table-allow" ShowPaging="false" PageSize="@int.MaxValue">
                        <HeaderContent>
                            <MudTh>@L["Name"]</MudTh>
                            <MudTh>Allow</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="TokenSigningAlgorithmsRow">
                            <MudTd>@TokenSigningAlgorithmsRow.Name</MudTd>
                            <MudTd><MudCheckbox></MudCheckbox></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Text="Secrets">
                    <MudTable Items="@currentApiResource.ApiSecrets" Class="mat-elevation-z5" ShowPaging="false" PageSize="@int.MaxValue">
                        <HeaderContent>
                            <MudTh style="min-width: 190px;"><MudButton Icon="add" Label="New Secret" OnClick="@(() => OpenCreateApiResourceSecretDialogOpen())"></MudButton></MudTh>
                            <MudTh>Expiration</MudTh>
                            <MudTh>Description</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="ApiResourceSecretRow">
                            <MudTd style="text-align: center;">
                                <MudIconButton Icon="delete" OnClick="@(() => OpenDeleteApiResourceSecretDialog(ApiResourceSecretRow))"></MudIconButton>
                            </MudTd>
                            <MudTd>@ApiResourceSecretRow.Expiration</MudTd>
                            <MudTd>@ApiResourceSecretRow.GetDisplayValue()</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Text="User Claims">
                    <fieldset>
                        <div class="form-group" style="margin-top: 16px;">
                            <div class="form-group">
                                <MudTextField @bind-Value="@currentApiResource.CustomUserClaimsText" Label="Custom User Claims" TextArea="true" FullWidth="true" Required="false"></MudTextField>
                            </div>
                        </div>
                    </fieldset>
                    <MudDivider></MudDivider>
                    <h3 class="mat-subtitle1">Jwt Claims</h3>
                    <MudTable Items="@jwtClaimSelections" Class="mat-elevation-z5, mdc-table-allow" ShowPaging="false" PageSize="@int.MaxValue">
                        <HeaderContent>
                            <MudTh>@L["Name"]</MudTh>
                            <MudTh>Required</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="JwtClaimRow">
                            <MudTd>@JwtClaimRow.Name</MudTd>
                            <MudTd>There was a CheckBox</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
            </MudTabs>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@CancelChanges">Cancel</MudButton>
        <MudButton OnClick="@UpsertApiResource">@labelUpsertDialogOkButton</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsOpen="@isDeleteApiResourceDialogOpen" Style="z-index:100" Title>
    <TitleContent><MudIcon Icon="warning" /> @L["Confirm Delete"]</TitleContent>
    <DialogContent>
        @L["Are you sure you want to delete {0}?", currentApiResource.Name]
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isDeleteApiResourceDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@DeleteApiResourceAsync">@L["Delete"]</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsOpen="@isDeleteApiResourceSecretDialogOpen" Style="z-index:100">
    <TitleContent><MudIcon Icon="warning" />@L["Confirm Delete"]</TitleContent>
    <DialogContent>
        @L["Are you sure you want to delete {0}?", currentSecret.GetDisplayValue()]
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isDeleteApiResourceSecretDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@DeleteApiResourceSecret">@L["Delete"]</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsOpen="@isCreateApiResourceSecretDialogOpen">
    <TitleContent>New Secret for API Resource @currentApiResource.Name</TitleContent>
    <DialogContent>
        <EditForm Model="@currentSecret">
            <FluentValidationValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    <MudTextField @bind-Value="@currentSecret.Description" Label="Description" Icon="description" IconTrailing="true" FullWidth="true"></MudTextField>
                </div>
                <div class="form-group">
                    <MudTextField @bind-Value="@currentSecret.Value" Label="Secret" Icon="lock_outline" IconTrailing="true" Required="true"></MudTextField>
                    <MudIconButton OnClick="@GenerateSecret" Icon="refresh"></MudIconButton>
                    @*https://github.com/SamProf/MatBlazor/issues/303
                        <MudTooltip Tooltip="You have to copy the secret now, because it cannot be retrieved anymore."></MudTooltip>*@
                    <MudIconButton Icon="info"></MudIconButton>
                </div>
                <div class="form-group">
                    <MudDatePicker @bind-Value="@currentSecret.Expiration" Label="Expiration" FullWidth="true" Minimum="@DateTime.Now"></MudDatePicker>
                </div>
            </fieldset>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isCreateApiResourceSecretDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@CreateSecret">Create API Resource Secret</MudButton>
    </DialogActions>
</MudDialog>

@code {
    int pageSize { get; set; } = 15;
    int currentPage { get; set; } = 0;

    bool isCurrentApiContextIdReadOnly = false;

    List<ApiResourceDto> apiResources;
    ApiResourceDto currentApiResource { get; set; } = new ApiResourceDto();
    Secret currentSecret { get; set; } = new Secret();

    #region OnInitializedAsync

    protected override async Task OnInitializedAsync()
    {
        await InitializeApiResourcesListAsync();
    }

    public async Task InitializeApiResourcesListAsync()
    {
        try
        {
            var apiResponse = await Http.GetNewtonsoftJsonAsync<ApiResponseDto<List<ApiResourceDto>>>($"api/Admin/ApiResources?pageSize={pageSize}&pageNumber={currentPage}");

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);



                apiResources = apiResponse.Result;
            }
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    #endregion

    #region OpenUpsertApiResourceDialog

    class Selection
    {
        public bool IsSelected { get; set; } = false;
        public string Name { get; set; }
        public string Value { get; set; }
    };

    bool isUpsertApiResourceDialogOpen = false;
    bool isInsertOperation;

    string labelUpsertDialogTitle;
    string labelUpsertDialogOkButton;
    List<Selection> jwtClaimSelections = new List<Selection>();
    List<Selection> tokenSigningAlgorithmsSelections = new List<Selection>();

    //See https://identityserver4.readthedocs.io/en/latest/topics/crypto.html
    string[] signingAlgorithms = new string[] { "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" };


    void OpenUpsertApiResourceDialog(ApiResourceDto apiResource = null)
    {
        try
        {
            isInsertOperation = apiResource == null;

            currentApiResource = apiResource ?? new ApiResourceDto();

            // Update the UI
            if (isInsertOperation)
            {
                labelUpsertDialogTitle = L["New API Resource"];
                labelUpsertDialogOkButton = L["Create"];
            }
            else
            {
                labelUpsertDialogTitle = L["Edit {0}", currentApiResource.Name];
                labelUpsertDialogOkButton = L["Update"];
            }

            isCurrentApiContextIdReadOnly = !isInsertOperation;

            jwtClaimSelections.Clear();

            foreach (var info in typeof(JwtClaimTypes).GetFields().Where(x => x.IsStatic && x.IsLiteral))
            {
                jwtClaimSelections.Add(new Selection
                {
                    Name = $"{info.Name.Humanize(LetterCasing.Title)} ({info.GetValue(info)})",
                    Value = info.GetValue(info).ToString(),
                    IsSelected = currentApiResource.UserClaims.Contains(info.GetValue(info))
                });
            }

            tokenSigningAlgorithmsSelections.Clear();

            foreach (var sa in signingAlgorithms)
            {
                tokenSigningAlgorithmsSelections.Add(new Selection
                {
                    Name = sa,
                    Value = sa,
                    IsSelected = currentApiResource.AllowedAccessTokenSigningAlgorithms.Contains(sa)
                });
            }

            currentApiResource.CustomUserClaims = currentApiResource.GetCustomUserClaims().ToList();

            if (!isInsertOperation)
                currentApiResource.SaveState();

            isUpsertApiResourceDialogOpen = true;
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    async Task UpdateEnabled(ApiResourceDto apiResource)
    {
        currentApiResource = apiResource;
        currentApiResource.Enabled = !currentApiResource.Enabled;
        isInsertOperation = false;
        await UpsertApiResource();
    }

    void CancelChanges()
    {
        currentApiResource.RestoreState();
        isUpsertApiResourceDialogOpen = false;
    }

    async Task UpsertApiResource()
    {
        try
        {
            if (currentApiResource == null)
            {
                viewNotifier.Show("ApiResource Creation Error", ViewNotifierType.Error, "New ApiResource not found");
                return;
            }

            if (isUpsertApiResourceDialogOpen)
            {
                currentApiResource.UserClaims = jwtClaimSelections.Where(i => i.IsSelected).Select(i => i.Value).ToList();
                currentApiResource.AllowedAccessTokenSigningAlgorithms = tokenSigningAlgorithmsSelections.Where(i => i.IsSelected).Select(i => i.Value).ToList();
                ((List<string>)currentApiResource.UserClaims).AddRange(currentApiResource.CustomUserClaims);
            }

            ApiResponseDto apiResponse;

            if (isInsertOperation)
                apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/Admin/ApiResource", currentApiResource);
            else
                apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/Admin/ApiResource", currentApiResource);

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success);

                StateHasChanged();
            }
            else
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error);


            await OnInitializedAsync();

            isUpsertApiResourceDialogOpen = false;
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        finally
        {
            currentApiResource.ClearState();
        }
    }

    #endregion

    #region OpenDeleteApiResourceDialog

    bool isDeleteApiResourceDialogOpen = false;

    void OpenDeleteApiResourceDialog(ApiResourceDto apiResource)
    {
        currentApiResource = apiResource;
        isDeleteApiResourceDialogOpen = true;
    }

    async Task DeleteApiResourceAsync()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Admin/ApiResource/{currentApiResource.Name}");
            if (response.StatusCode != (HttpStatusCode)Status200OK)
            {
                viewNotifier.Show("ApiResource Delete Failed", ViewNotifierType.Error);
                return;
            }

            viewNotifier.Show("API Resource Deleted", ViewNotifierType.Success);
            await OnInitializedAsync();
            isDeleteApiResourceDialogOpen = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    #endregion

    #region OpenDeleteApiResourceSecretDialog

    bool isDeleteApiResourceSecretDialogOpen = false;

    void OpenDeleteApiResourceSecretDialog(Secret secret)
    {
        currentSecret = secret;
        isDeleteApiResourceSecretDialogOpen = true;
    }

    void DeleteApiResourceSecret()
    {
        currentApiResource?.ApiSecrets.Remove(currentSecret);
        isDeleteApiResourceSecretDialogOpen = false;
    }

    #endregion

    #region OpenCreateApiResourceSecretDialogOpen

    bool isCreateApiResourceSecretDialogOpen = false;

    void OpenCreateApiResourceSecretDialogOpen()
    {
        currentSecret = new Secret();
        GenerateSecret();
        isCreateApiResourceSecretDialogOpen = true;
    }

    public void CreateSecret()
    {
        if (!string.IsNullOrWhiteSpace(currentSecret.Value))
        {
            currentSecret.Value = currentSecret.Value.ToSha512();

            if (string.IsNullOrWhiteSpace(currentSecret.Description))
                currentSecret.Description = $"Created on {DateTime.Now}";

            currentApiResource?.ApiSecrets.Add(currentSecret);
            isCreateApiResourceSecretDialogOpen = false;
        }
    }

    void GenerateSecret()
    {
        currentSecret.Value = IdentityModel.CryptoRandom.CreateUniqueId(32);
    }

    #endregion

}
