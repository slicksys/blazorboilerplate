@page "/admin/settings/email"
@inherits SettingsBase
@using SSDCPortal.Shared.Dto.Email

<MudH4>@L["EmailSettings"]</MudH4>

@if (settings == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>@L["Loading"]</label>
    </LoadingBackground>
}
else
{
    <EditForm Model="@settings">
        <FluentValidationValidator />
        <ValidationSummary />
        <fieldset>
            <MudH5>@L["OutgoingEmail"]</MudH5>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_FromAddress].Value" Label="@L["SenderEmail"]" Icon="alternate_email" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_FromName].Value" Label="@L["SenderName"]" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_SmtpServer].Value" Label="@L["SmtpServer"]" Icon="dns" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_SmtpPort].ValueAsInt" Label="@L["Port"]" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_SmtpUsername].Value" Label="@L["UserName"]" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_SmtpPassword].Value" Label="@L["Password"]" Type="password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudSwitch @bind-Checked="@settings[SettingKey.EmailConfiguration_SmtpUseSSL].ValueAsBool" Label="SSL"></MudSwitch>
            </div>
            <MudDivider></MudDivider>
            <MudH5>@L["IncomingEmail"]</MudH5>
            <MudH5>POP3</MudH5>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_PopServer].Value" Label="@L["PopServer"]" Icon="dns" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_PopPort].ValueAsInt" Label="@L["Port"]" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_PopUsername].Value" Label="@L["UserName"]" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_PopPassword].Value" Label="@L["Password"]" Type="password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudSwitch @bind-Checked="@settings[SettingKey.EmailConfiguration_PopUseSSL].ValueAsBool" Label="SSL"></MudSwitch>
            </div>
            <MudDivider></MudDivider>
            <MudH5>IMAP</MudH5>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_ImapServer].Value" Label="@L["ImapServer"]" Icon="dns" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_ImapPort].ValueAsInt" Label="@L["Port"]" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_ImapUsername].Value" Label="@L["UserName"]" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@settings[SettingKey.EmailConfiguration_ImapPassword].Value" Label="@L["Password"]" Type="password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudSwitch @bind-Checked="@settings[SettingKey.EmailConfiguration_ImapUseSSL].ValueAsBool" Label="SSL"></MudSwitch>
            </div>
        </fieldset>
    </EditForm>

    <MudButton OnClick="@(()=>apiClient.CancelChanges())">@L["Cancel"]</MudButton>
    <MudButton OnClick="@SaveChanges">@L["Save"]</MudButton>
    <MudButton OnClick="@(e => { isSendEmailDialogOpen = true; })">@L["Send test email"]</MudButton>

    <MudDialog @bind-IsOpen="@isSendEmailDialogOpen">
        <TitleContent>@L["Send test email"]</TitleContent>
        <DialogContent>
            <EditForm id="emailForm" Model="@email" OnValidSubmit="@SendTestEmail">
                <FluentValidationValidator />
                <ValidationSummary />
                <fieldset>
                    <div class="form-group">
                        <MudTextField @bind-Value="@email.ToAddress" Label=@L["Email"] Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                    </div>
                </fieldset>
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(e => { isSendEmailDialogOpen = false; })">@L["Cancel"]</MudButton>
            <MudButton Type="submit" form="emailForm">@L["Send"]</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    bool isSendEmailDialogOpen = false;
    EmailDto email { get; set; } = new EmailDto();

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings("EmailConfiguration_");
    }

    async Task SendTestEmail()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.SendTestEmail(email);

            if (apiResponse.IsSuccessStatusCode)
            {
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
