@page "/todo_list"
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IStringLocalizer<Global> L
@inject IDialogService DialogService


@using System.Net.Http.Json
@inject HttpClient httpClient

<MudLayout>
    <MudMainContent>
      <MudCard>

<h1>Todo List - CRUD  </h1>
<p>
    This Todo List demonstrates fetching data from the server and CRUD for Blazor with <a href="http://breeze.github.io" target="_blank">Breeze</a> to make API design easy.
    Check out the <a href="https://github.com/enkodellc/blazorboilerplate" target="_blank">repository to view the source.</a>
    If you find this helpful please contribute or <DonateButton /> to support further development.
    <b>Delete is Protected to Admin users only</b>.
</p>

<MudTable Items="@todos" Dense="true" Hover="@true" Bordered="@true" Striped="@true" @bind-SelectedItem="@selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField T="string" Text="Go Fuck Yourself" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Silly Icon</MudTh>
        <MudTh>Fucking Id</MudTh>
        <MudTh>Is Complete</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Created On</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="delete" OnClick="@(() => OpenDeleteDialog(context.Id))"></MudIconButton>
        </MudTd>
        <MudTd>@String.Format("{0:d}", @context.Id)</MudTd>
        <MudTd>Is Completed = @context.IsCompleted.ToString()</MudTd>
        <MudTd>@context.Title</MudTd>
        <MudTd>@context.CreatedOn</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudDialog @bind-IsOpen="@dialogIsOpen">
    <TitleContent>Create Todo</TitleContent>
    <DialogContent>
        <EditForm Model="@todo" OnValidSubmit="@NewEntity">
            <FluentValidationValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    <MudTextField @bind-Value="@todo.Title" Label="Title" Icon="title" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
                </div>
                <div class="form-group">
                    <MudCheckBox T="bool" Checked="@todo.IsCompleted" Label="Completed"></MudCheckBox>
                </div>
            </fieldset>
        </EditForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="@(e => { dialogIsOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@NewEntity">Create Todo</MudButton>
    </DialogActions>
</MudDialog>

    <MudDialog @bind-IsOpen="@deleteDialogOpen" Style="z-index:100">
        <TitleContent><MudIcon Icon="warning"></MudIcon> @L["Confirm Delete"]</TitleContent>
        <DialogContent>
            @L["Are you sure you want to delete {0}?", todo.Title]
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(e => { deleteDialogOpen = false; })">@L["Cancel"]</MudButton>
            <MudButton OnClick="@Delete">@L["Delete"]</MudButton>
        </DialogActions>
    </MudDialog>
      </MudCard>
    </MudMainContent>
</MudLayout>

@code {
    bool deleteDialogOpen = false;
    bool dialogIsOpen = false;
    List<Todo> todos = new List<Todo>();
    private Todo selectedItem = null;
    Todo todo { get; set; } = new Todo();

    protected override async Task OnInitializedAsync()
    {
        await LoadMainEntities();
    }

    async Task LoadMainEntities()
    {
        try
        {
            var result = await apiClient.GetToDos();
            todos = new List<Todo>(result);

            viewNotifier.Show(L["One item found", Plural.From("{0} items found", (int)result.InlineCount)], ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    public async void Update(Todo todo)
    {
        try
        {
            todo.IsCompleted = !todo.IsCompleted;

            await apiClient.SaveChanges();

            viewNotifier.Show($"{todo.Title} updated", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    public async Task Delete()
    {
        try
        {
            apiClient.RemoveEntity(todo);
            await apiClient.SaveChanges();
            todos.Remove(todo);
            viewNotifier.Show($"{todo.Title} deleted", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }

        todo = new Todo();

        deleteDialogOpen = false;
    }

    public void OpenDialog()
    {
        dialogIsOpen = true;
    }

    public void OpenDeleteDialog(long todoId)
    {
        todo = todos.Where(x => x.Id == todoId).SingleOrDefault();
        deleteDialogOpen = true;
    }

    public async Task NewEntity()
    {
        dialogIsOpen = false;

        try
        {
            apiClient.AddEntity(todo);

            await apiClient.SaveChanges();

            await LoadMainEntities();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }

        todo = new Todo();


    }

}
