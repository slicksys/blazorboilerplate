@page "/todo_list"
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IStringLocalizer<Global> L

<h1>Todo List - CRUD</h1>
<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Dashboard</MudText>
<MudGrid>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Euro" Color="Color.Primary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Total Income</MudText>
                <MudText Typo="Typo.h5">125,000</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Layers" Color="Color.Secondary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Total Stock</MudText>
                <MudText Typo="Typo.h5">150,000</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.Public" Color="Color.Success" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Global Sales</MudText>
                <MudText Typo="Typo.h5">46,000</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Elevation="25" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Custom.Uncategorized.Radioactive" Color="Color.Warning" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Roentgen</MudText>
                <MudText Typo="Typo.h5">3,6</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="8">
        <MudPaper Elevation="25" Class="pa-4" Style="height:300px;">
            Charts comming soon ish...
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudPaper Elevation="25" Class="pa-4" Style="height:300px;">
            Charts comming soon ish...
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12" md="6">
        <MudCard Elevation="25" Style="height:100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Earning Report</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="px-0">
                <MudSimpleTable Elevation="0" Hover="true">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Priority</th>
                            <th>Earnings</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var x in new int[] { 1, 2, 3, 4, 5, 6, 7, 8 })
                        {
                            <tr>
                                <td>
                                    <div class="d-flex flex-row">
                                        <MudAvatar Image=@x.ToString() Class="mud-elevation-25" />
                                        <div class="ml-6">
                                            <MudText Typo="Typo.subtitle2">@x.ToString()</MudText>
                                            <MudText Typo="Typo.body2">@x.ToString()</MudText>
                                        </div>
                                    </div>
                                </td>
                          
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="6">
        <MudCard Elevation="25" Style="height:100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Recent incidents</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="px-0">
                <MudList Clickable="true">
                    <MudListItem>
                        <div class="d-flex flex-row">
                            <MudAvatar Class="mud-elevation-25">
                                <MudIcon Icon="@Icons.Custom.Brands.GitHub" Class="mx-4" />
                            </MudAvatar>
                            <div class="ml-6">
                                <MudText Typo="Typo.subtitle2">Issues rising</MudText>
                                <MudText Typo="Typo.body2">Issues is almost reaching 100</MudText>
                            </div>
                            <MudChip Label="true" Color="Color.Error" Size="Size.Small" Class="ml-auto mud-elevation-25">Danger</MudChip>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex flex-row">
                            <MudAvatar Class="mud-elevation-25">
                                <MudIcon Icon="@Icons.Custom.Uncategorized.Radioactive" Class="mx-4" />
                            </MudAvatar>
                            <div class="ml-6">
                                <MudText Typo="Typo.subtitle2">Incident in plant number 4</MudText>
                                <MudText Typo="Typo.body2">Fire in reactor core</MudText>
                            </div>
                            <MudChip Label="true" Color="Color.Info" Size="Size.Small" Class="ml-auto mud-elevation-25">Minor</MudChip>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex flex-row">
                            <MudAvatar Class="mud-elevation-25">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="mx-4" />
                            </MudAvatar>
                            <div class="ml-6">
                                <MudText Typo="Typo.subtitle2">Occupational injury</MudText>
                                <MudText Typo="Typo.body2">Employee broke a finger while writing some code</MudText>
                            </div>
                            <MudChip Label="true" Color="Color.Success" Size="Size.Small" Class="ml-auto mud-elevation-25">Dismissed</MudChip>
                        </div>
                    </MudListItem>
                </MudList>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
@code {
    bool deleteDialogOpen = false;
    bool dialogIsOpen = false;
    List<Todo> todos = new List<Todo>();
    Todo todo { get; set; } = new Todo();

    protected override async Task OnInitializedAsync()
    {
        await LoadMainEntities();
    }

    async Task LoadMainEntities()
    {
        try
        {
            var result = await apiClient.GetToDos();
            todos = new List<Todo>(result);
            viewNotifier.Show(L["One item found", Plural.From("{0} items found", (int)result.InlineCount)], ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    public async void Update(Todo todo)
    {
        try
        {
            todo.IsCompleted = !todo.IsCompleted;

            await apiClient.SaveChanges();

            viewNotifier.Show($"{todo.Title} updated", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    public async Task Delete()
    {
        try
        {
            apiClient.RemoveEntity(todo);
            await apiClient.SaveChanges();
            todos.Remove(todo);
            viewNotifier.Show($"{todo.Title} deleted", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }

        todo = new Todo();

        deleteDialogOpen = false;
    }

    public void OpenDialog()
    {
        dialogIsOpen = true;
    }

    public void OpenDeleteDialog(long todoId)
    {
        todo = todos.Where(x => x.Id == todoId).SingleOrDefault();
        deleteDialogOpen = true;
    }

    public async Task NewEntity()
    {
        dialogIsOpen = false;

        try
        {
            apiClient.AddEntity(todo);

            await apiClient.SaveChanges();

            await LoadMainEntities();
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }

        todo = new Todo();
    }
}
