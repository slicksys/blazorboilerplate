@namespace MudBlazor.ThemeManager
@using System.Threading.Tasks 

<MudOverlay @bind-Visible="_isOpen" AutoClose="true" />

<div class="relative">
    <div class="mud-list-item-clickable mud-ripple px-4 py-3" @onclick="ToggleOpen">
        <MudText Typo="Typo.body2" Class="mud-float-left">@Name</MudText>
        <div style="background:@ThemeColor.ToString();" class="px-8 py-3 mud-float-right rounded mud-elevation-25"></div>
    </div>
    <MudPopover Open="@_isOpen" Elevation="25" Square="true" OffsetY="true" Direction="Direction.Bottom">
        <MudColorPicker Class="mud-thememanager-color-picker" PickerVariant="PickerVariant.Static" Elevation="0" Value="ThemeColor" ValueChanged="UpdateColor" ColorPickerView="ColorPickerView"/>
    </MudPopover>
</div>



@code {
    [CascadingParameter] MudThemeManager ThemeManager { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public MudColor ThemeColor { get; set; }
    [Parameter] public ThemePaletteColor ColorType { get; set; }
    [Parameter] public ColorPickerView ColorPickerView { get; set; } = ColorPickerView.Spectrum;

    private bool _isOpen;
    private bool _shouldRender;

    public void ToggleOpen()
    {
        if (_isOpen)
        {
            _isOpen = false;
            _shouldRender = false;
        }
        else
        {
            _isOpen = true;
            _shouldRender = true;
        }
    }

    protected override bool ShouldRender()
    {
        return _shouldRender;
    }

    public async Task UpdateColor(MudColor value)
    {
        ThemeColor = value;
        var newPaletteColor = new ThemeUpdatedValue()
        {
            ColorStringValue = value.ToString(),
            ThemePaletteColor = ColorType
        };

        await ThemeManager.UpdatePalette(newPaletteColor);
    }
}
