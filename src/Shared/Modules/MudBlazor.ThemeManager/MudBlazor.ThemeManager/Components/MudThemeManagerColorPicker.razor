@namespace MudBlazor.ThemeManager

@using System.Reflection
@using System.Collections.Generic
@using System.Text.RegularExpressions

<div class="ml-n6 mr-n6 px-6 py-4" style="background-color:#F5F5F5;">
    <div class="" style="height:54px;">
        <MudTextField T="string" @bind-Text="ColorValue" Validation="@(new Func<string, string>(ColorMatch))" Placeholder="#Hex, rgb or rgba" Variant="Variant.Text" Margin="Margin.Dense" Class="my-0 mud-thememanager-color-input"></MudTextField>
    </div>
    <MudText Typo="Typo.body2">Shade: <b>@Shades[Shade]</b></MudText>
    <MudSlider T="int" @bind-Value="@Shade" Min="0" Max="13" Step="1" />
    <div class="d-flex mt-1">
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Red", 13);" @onclick="@((e) => UpdateColor("Red", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Pink", 13);" @onclick="@((e) => UpdateColor("Pink", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Purple", 13);" @onclick="@((e) => UpdateColor("Purple", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("DeepPurple", 13);" @onclick="@((e) => UpdateColor("DeepPurple", 13))"></div>
    </div>
    <div class="d-flex">
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Indigo", 13);" @onclick="@((e) => UpdateColor("Indigo", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Blue", 13);" @onclick="@((e) => UpdateColor("Blue", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("LightBlue", 13);" @onclick="@((e) => UpdateColor("LightBlue", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Cyan", 13);" @onclick="@((e) => UpdateColor("Cyan", 13))"></div>
    </div>
    <div class="d-flex">
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Teal", 13);" @onclick="@((e) => UpdateColor("Teal", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Green", 13);" @onclick="@((e) => UpdateColor("Green", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("LightGreen", 13);" @onclick="@((e) => UpdateColor("LightGreen", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Lime", 13);" @onclick="@((e) => UpdateColor("Lime", 13))"></div>
    </div>
    <div class="d-flex">
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Yellow", 13);" @onclick="@((e) => UpdateColor("Yellow", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Amber", 13);" @onclick="@((e) => UpdateColor("Amber", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Orange", 13);" @onclick="@((e) => UpdateColor("Orange", 13))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("DeepOrange", 13);" @onclick="@((e) => UpdateColor("DeepOrange", 13))"></div>
    </div>
    <div class="d-flex">
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Brown", 9);" @onclick="@((e) => UpdateColor("Brown", 9))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("BlueGrey", 9);" @onclick="@((e) => UpdateColor("BlueGrey", 9))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@GetColor("Grey", 9);" @onclick="@((e) => UpdateColor("Grey", 9))"></div>
        <div class="pa-6 theme-color-picker-color mud-ripple" style="background:@Colors.Shades.Black;" @onclick="@((e) => UpdateColor(Colors.Shades.Black, 1337))"></div>
    </div>
    <div class="d-flex">
        <div class="pt-4 theme-color-picker-color mud-ripple d-flex justify-center" style="width: 96px; height:48px; background-color:@Colors.Shades.White;" @onclick="@((e) => UpdateColor(Colors.Shades.White, 1337))"><MudText Typo="Typo.caption">White</MudText></div>
        <div class="pt-4 theme-color-picker-color mud-ripple d-flex justify-center" style="width: 96px; height:48px; background-color:@Colors.Shades.Transparent;" @onclick="@((e) => UpdateColor("transparent", 1337))"><MudText Typo="Typo.caption">Transparent</MudText></div>
    </div>
</div>

@code {
    [Parameter] public string ColorValue { get; set; }
    [Parameter] public ThemePaletteColor ColorType { get; set; }
    [Parameter] public EventCallback<ThemeUpdatedValue> ColorValueChanged { get; set; }

    MudForm colorForm;
    bool isValidColor;
    public int Shade { get; set; }
    public string BackgroundColor { get; set; }

    string Pattern = @"#([0-9a-f]{4,8}|[0-9a-f]{6}|[0-9a-f]{3})|rgb\(\s*\d{1,3}\s*,\s*\d{1,3}\s*,\s*\d{1,3}\s*\)|rgba\(\s*\d{1,3}\s*,\s*\d{1,3}\s*,\s*\d{1,3}\s*,\s*\d{1,3}\s*\)";

    private string[] Shades =
{
        "Default", "Lighten5", "Lighten4", "Lighten3","Lighten2", "Lighten1", "Darken1", "Darken2", "Darken3", "Darken4", "Accent1", "Accent2", "Accent3", "Accent4",
    };

    private string ColorMatch(string arg)
    {
        Match match = Regex.Match(ColorValue, Pattern, RegexOptions.IgnoreCase);
        if (!match.Success)
            return "Invalid Color";
        return null;
    }

    async Task UpdateColor(string basecolor, int max)
    {
        string _tempColor;

        if (max == 1337)
            _tempColor = basecolor;
        else
            _tempColor = GetColor(basecolor, max);

        ColorValue = _tempColor;

        var newPaletteColor = new ThemeUpdatedValue()
        {
            ColorStringValue = ColorValue,
            ThemePaletteColor = ColorType
        };

        await ColorValueChanged.InvokeAsync(newPaletteColor);
    }

    public string GetColor(string basecolor, int max)
    {
        var colors = typeof(Colors).GetMembers().Where(m => m.DeclaringType.FullName.Contains("MudBlazor.Colors"));
        var color = colors.FirstOrDefault(c => c.Name == basecolor);
        int shade = Shade;

        if (shade > max)
        {
            shade = 0;
        }

        BackgroundColor = (((dynamic)color).DeclaredProperties as IEnumerable<dynamic>).Select(m => ((PropertyInfo)m).GetValue(m)).ElementAt((int)shade);

        return BackgroundColor;
    }
}
